(include-book "MainMonopoly")



(defun RollHelp (id space passgo player)
  (if (equal space 30)
      (cond
        ((equal id 1) 
         (list (cons id (cons 10 (nthcdr 2 (car player)))) 
               (cadr player) (caddr player) (cadddr player)))
        ((equal id 2) 
         (list (car player)
               (cons id (cons 10 (nthcdr 2 (cadr player))))
               (caddr player)(cadddr player)))
        ((equal id 3) (list (car player)(cadr player)
                            (cons id (cons 10 (nthcdr 2 (caddr player))))
                            (cadddr player)))
        ((equal id 4) (list (car player)(cadr player)(caddr player)
                            (cons id (cons 10 (nthcdr 2 (cadddr player))))))
        
        )
      (if (equal passgo T)
      (cond
        ((equal id 1) 
         (list (cons id (cons space (cons (+ 200 (caddr (car player)))(nthcdr 3 (car player)))))
               (cadr player) (caddr player) (cadddr player)))
        ((equal id 2) 
         (list (car player)
               (cons id (cons space (cons (+ 200 (caddr (cadr player)))(nthcdr 3 (cadr player)))))
               (caddr player)(cadddr player)))
        ((equal id 3) (list (car player)(cadr player)
                            (cons id (cons space (cons (+ 200 (caddr (caddr player)))(nthcdr 3 (caddr player)))))
                            (cadddr player)))
        ((equal id 4) (list (car player)(cadr player)(caddr player)
                            (cons id (cons space (cons (+ 200 (caddr (cadddr player)))(nthcdr 3 (cadddr player)))))))
        
        )
      (cond
        ((equal id 1) 
         (list (cons id (cons space (nthcdr 2 (car player)))) 
               (cadr player) (caddr player) (cadddr player)))
        ((equal id 2) 
         (list (car player)
               (cons id (cons space (nthcdr 2 (cadr player))))
               (caddr player)(cadddr player)))
        ((equal id 3) (list (car player)(cadr player)
                            (cons id (cons space (nthcdr 2 (caddr player))))
                            (cadddr player)))
        ((equal id 4) (list (car player)(cadr player)(caddr player)
                            (cons id (cons space (nthcdr 2 (cadddr player))))))
        )
      )
 )
)

(defun JailTurn(id D1 D2 player)

  (if (equal D1 D2)
       (cond
         ((equal id 1)
         (list (cons id (cons (+ 10(+ D1 D2))( cons(caddr (car player)) '(0 0))))
               (cadr player)(caddr player)(cadddr player)
          )          
          )
         ((equal id 2)
         (list (car player)
               (cons id (cons (+ 10(+ D1 D2))( cons (caddr (cadr player)) '(0 0))))
               (caddr player)(cadddr player)
          )          
          )
         ((equal id 3)
         (list (car player)(cadr player)
               (cons id (cons (+ 10(+ D1 D2))( cons (caddr (caddr player)) '(0 0))))
               (cadddr player)
          )          
          )
         ((equal id 4)
          (list (car player)(cadr player)(caddr player)
          (cons id (cons (+ 10(+ D1 D2))( cons (caddr (cadddr player)) '(0 0))))
          )          
          )
        )
        (cond
        ((equal id 1) 
         (if (equal 2 (cadddr (cdar player))) 
         (list (cons id (cons 10( cons (- (caddr (car player)) 50) '(0 0))))
               (cadr player)(caddr player)(cadddr player)
          )
             (list (append(take 4 (car player)) (cons (+ 1 (cadddr (cdar player))) nil)) 
               (cadr player) (caddr player) (cadddr player))))
        ((equal id 2) 
         (if (equal 2 (cadddr (cdadr player))) 
         (list (car player)
               (cons id (cons 10( cons (- (caddr (cadr player)) 50) '(0 0))))
               (caddr player)(cadddr player)
          )      
         (list (car player)
               (append(take 4 (cadr player)) (cons (+ 1 (cadddr (cdadr player))) nil))
               (caddr player)(cadddr player))))
        ((equal id 3)
         (if (equal 2 (cadddr (cdaddr player))) 
         (list (car player)(cadr player)
               (cons id (cons 10( cons (- (caddr (caddr player)) 50) '(0 0))))
               (cadddr player)
          )
         (list (car player)(cadr player)
                            (append(take 4 (caddr player)) (cons (+ 1 (cadddr (cdaddr player))) nil))
                            (cadddr player))))
        ((equal id 4) 
         (if (equal 2 (cadddr (cdr(cadddr player)))) 
          (list (car player)(cadr player)(caddr player)
          (cons id (cons 10( cons (- (caddr (cadddr player)) 50) '(0 0))))
          )
         (list (car player)(cadr player)(caddr player)
                            (append(take 4 (cadddr player)) (cons (+ 1 (cadddr (cdr(cadddr player)))) nil)))))
        )
 )
)

; output -> player state ((1 ...)  (2 ...) (3 ...) (4 ...))
(defun Roll (player-number die1 die2 player-state)
    (cond
    ((equal player-number 1)
     (if (equal( cadr(car player-state)) 40)
         (JailTurn 1 die1 die2 player-state)
          (if (<= (+ (+ die1 die2)( cadr(car player-state))) 39)
              (RollHelp 1 (+ 
                               (+ die1 die2)( cadr(car player-state))) nil player-state)
              (RollHelp 1 (-
                               (+ 
                                (+ die1 die2)( cadr(car player-state))) 40) T player-state)
              )))
    
    ((equal player-number 2)
     (if (equal( cadr(cadr player-state)) 40)
         (JailTurn 2 die1 die2 player-state)
          (if (<= (+ (+ die1 die2)( cadr(cadr player-state))) 39)
              (RollHelp 2 (+
                               (+ die1 die2)( cadr(cadr player-state))) nil player-state)
              (RollHelp 2 (-
                               (+
                                (+ die1 die2)( cadr(cadr player-state))) 40) T player-state)
              )))
    
    ((equal player-number 3)
     (if (equal( cadr(caddr player-state)) 40)
         (JailTurn 3 die1 die2 player-state)
          (if (<= (+ (+ die1 die2)( cadr(caddr player-state))) 39)
              (RollHelp 3 (+ 
                               (+ die1 die2)( cadr(caddr player-state))) nil player-state)
              (RollHelp 3 (-
                               (+ 
                                (+ die1 die2)( cadr(caddr player-state))) 40) T player-state)
              )))
    ((equal player-number 4)
     (if (equal( cadr(cadddr player-state)) 40)
         (JailTurn 4 die1 die2 player-state)
          (if (<= (+ (+ die1 die2)( cadr(cadddr player-state))) 39)
              (RollHelp 4 (+ 
                               (+ die1 die2)( cadr(cadddr player-state))) nil player-state)
              (RollHelp 4 (-
                               (+ 
                                (+ die1 die2)( cadr(cadddr player-state))) 40) T player-state)
              )))
    
    ( T NIL)))

(defun main(state)
  (let* (
       (game (get-game-state state))
       (game-state (car game))
       (next-move (car (get-next-move-from-game-state game-state)))
       (player-state (get-player-state-from-game-state game-state))
       (prop-state (get-prop-state-from-game-state game-state))
       (pnum (car next-move))
       (roll1 (cadr next-move))
       (roll2 (caddr next-move))
       (new-player-state (Roll pnum roll1 roll2 player-state))
       )
   (write-game-state new-player-state prop-state state)))
